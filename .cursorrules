# AARC Capital Webtools — Cursor Rules (Figma→Next.js)

## Project Overview
AARC Capital Investor Confidence Platform - Educational investment tools with freemium model, proprietary optimization algorithms, and design-to-code workflow.

## Core Principles
- Always prefer **semantic naming** over property-based names
- Abide by the component hierarchy: **ui → shared → features → sections → layout**
- Use **TypeScript** with explicit prop interfaces
- Use **design tokens** from `src/lib/tokens.ts` (no hardcoded colors/spacing)
- Use **combo classes** from `src/styles/globals.css` for repeated patterns (extract when a pattern repeats 3+ times)

## Technology Stack
- **Framework**: Next.js 14+ (App Router) on Vercel
- **Styling**: Tailwind CSS with design tokens and combo classes
- **UI Libraries**: shadcn/ui (primary), HeroUI (alternative), 21st.dev
- **CMS**: Strapi (self-hosted) for educational content
- **Database**: PostgreSQL with Redis caching
- **Design Integration**: Figma MCP for design-to-code workflow

## Imports & Libraries
- Import UI primitives from the **abstraction layer**: `import { Button, Card, Input } from '@/components/ui'`
- The underlying library (shadcn or HeroUI) is selected in `components/ui/index.ts`. Do not import directly from libraries
- Use Strapi data fetching patterns: `import { getPathway, getLesson } from '@/lib/strapi'`

## Figma MCP Workflow
- Before generation, **fetch latest** design data via the **Figma MCP server**
- Translate Figma layers to **semantic components**:
  - Examples: `HeroSection`, `PricingTable`, `NavigationMenu`, `OptionPricerPanel`, `PortfolioOptimizer`
  - Ignore generic names (Frame/Group/Rectangle). Use context/purpose
- Extract colors/spacing/typography to **`tokens.ts`**; prefer **HSL** and CSS vars
- Map Auto Layout → Tailwind flex/grid; padding/gap → `p-*/gap-*`; type styles → typography tokens

## Component Structure
- Files in `kebab-case` (e.g., `hero-section.tsx`); components in `PascalCase`
- Place components by intent:
  - UI primitives → `components/ui/`
  - Sections → `components/sections/`
  - Features (domain) → `components/features/` (e.g., `OptionPricerPanel`, `PortfolioOptimizer`)
  - Layout → `components/layout/`
  - Shared → `components/shared/`
- Use **shadcn** or **HeroUI** components before creating customs
- Include **responsive** classes: base → mobile; `md:`/`lg:` for larger breakpoints

## Styling Priority
1) **Design Tokens** (`tokens.ts`)
2) **Combo Classes** (`globals.css`)
3) **Tailwind utilities** (one-offs)
4) **Component props** (e.g., `variant`, `size`, `color`)

## AARC-Specific Components
When creating financial/investment components:
- **OptionPricerPanel**: Options pricing calculator interface
- **PortfolioOptimizer**: Portfolio optimization tool interface
- **RiskReturnChart**: Risk-return visualization component
- **DiversificationChecker**: Portfolio diversification analysis
- **ScenarioSimulator**: What-if scenario simulation interface
- **PricingTable**: Subscription pricing display
- **EducationalPathway**: Learning pathway navigation
- **SubscriptionManager**: User subscription management

## Strapi Integration Patterns
- Use server components for content fetching: `export async function getPathway(slug: string)`
- Apply cache tags for webhook revalidation: `{ next: { tags: ['pathway:slug'] } }`
- Handle tier-based content access (free vs premium)
- Use ISR for static content with webhook revalidation
- Fetch content with proper population: `populate=deep` for related content

## Example Generation Prompt (Good)
"Generate **PricingTable** from Figma frame 'Pricing — Table v2':
- Import primitives from `@/components/ui`
- Use tokens for colors/spacing/typography
- Extract repeated patterns into combo classes if used 3+ times
- Type all props (plan name, price, features[])
- Responsive: 1 col mobile, 2 col tablet, 3 col desktop
- Accessibility: semantic table/aria labels
- Include subscription tier logic (free vs premium)"

## Class Naming
- Use **semantic** class names scoped by component:
  - `pricing-table`, `pricing-card`, `pricing-feature-list`
  - `hero-section`, `nav-menu`, `option-pricer-form`
  - `portfolio-optimizer`, `risk-return-chart`, `diversification-checker`
- Avoid property-based names (`flex-col-center`, `blue-button`, `grid3x3`)

## Strapi Integration Hooks
- When a component is content-driven, add **data props** shaped like Strapi responses
- Avoid CMS-specific logic in UI; fetch data in **server components** or **loaders**
- For publish events, emit a **revalidation webhook** to Vercel (`/api/revalidate`)
- Use proper TypeScript types for Strapi content: `Pathway`, `Module`, `Lesson`

## Financial/Investment Specific Guidelines
- Always include **disclaimers** for educational/simulation purposes
- Use **proper financial terminology** and calculations
- Include **loading states** for async calculations
- Handle **error states** gracefully for financial data
- Implement **progressive disclosure** for complex financial concepts
- Use **charts and visualizations** for financial data (D3.js, Plotly.js)

## Accessibility & Performance
- Use semantic HTML (`nav/main/section/article`), labels for icon buttons, alt text, focus order
- Use `next/image`, loading/error states, and avoid client components unless needed
- Implement **keyboard navigation** for financial calculators
- Include **ARIA labels** for complex financial interfaces
- Use **loading skeletons** for financial data fetching

## Freemium Model Implementation
- Check user subscription tier before showing premium content
- Use middleware for route protection: `middleware.ts`
- Implement **paywall components** for premium features
- Show **upgrade prompts** for free users accessing premium content
- Track **usage analytics** for lead scoring

## Code Quality Checks (must pass)
- [ ] Semantic component & class names
- [ ] Tokens used (no hardcoded hex/rgb)
- [ ] Combo classes used where repeated
- [ ] shadcn/HeroUI primitives leveraged
- [ ] Responsive breakpoints included
- [ ] TypeScript props defined
- [ ] A11y attributes present
- [ ] Strapi integration patterns followed
- [ ] Financial disclaimers included
- [ ] Loading/error states handled

## File Creation Checklist
- [ ] File in correct directory (ui/shared/features/sections/layout)
- [ ] Semantic naming (not property-based)
- [ ] TypeScript interface for props
- [ ] Proper import organization
- [ ] Design tokens used for colors/spacing
- [ ] Combo classes used where applicable
- [ ] Responsive design classes included
- [ ] Accessibility attributes (aria-labels, semantic HTML)
- [ ] Strapi data fetching if content-driven
- [ ] Financial disclaimers if applicable

## Performance Guidelines
- Use **ISR** for static content pages
- Implement **webhook revalidation** for content updates
- Use **dynamic imports** for heavy financial calculation components
- Optimize **bundle size** with tree shaking
- Use **Redis caching** for expensive calculations
- Implement **progressive loading** for large datasets

## Security Considerations
- **Sanitize user inputs** in financial calculators
- **Validate subscription tiers** on both client and server
- **Rate limit** API endpoints for financial calculations
- **Encrypt sensitive data** in transit and at rest
- **Audit trail** for financial calculations and user actions

## Testing Requirements
- **Unit tests** for financial calculation functions
- **Integration tests** for Strapi content fetching
- **E2E tests** for subscription flows
- **Accessibility tests** for financial interfaces
- **Performance tests** for optimization algorithms

## Deployment Considerations
- **Environment variables** for Strapi URL and tokens
- **Webhook secrets** for revalidation
- **Database migrations** for content schema changes
- **CDN configuration** for static assets
- **Monitoring** for financial calculation performance

## AARC Capital Brand Guidelines
- Use **professional, trustworthy** design language
- Implement **clear value propositions** for premium features
- Include **educational context** with all financial tools
- Maintain **regulatory compliance** messaging
- Use **consistent terminology** across all components

## Quick Reference Commands
```bash
# Initialize Next.js project
npx create-next-app@latest aarc-webtools --typescript --tailwind --app

# Install shadcn/ui
npx shadcn-ui@latest init
npx shadcn-ui@latest add button card input

# Install additional dependencies
npm install class-variance-authority clsx tailwind-merge
npm install -D @types/node

# Install HeroUI (optional)
npm install @nextui-org/react framer-motion

# Install Strapi dependencies
npm install @strapi/strapi
```

## Example Component Structure
```typescript
// src/components/features/portfolio-optimizer.tsx
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { tokens } from '@/lib/tokens';
import { cn } from '@/lib/utils';

interface PortfolioOptimizerProps {
  initialPortfolio: Portfolio;
  constraints: OptimizationConstraints;
  onOptimize: (result: OptimizationResult) => void;
  userTier: 'free' | 'premium';
}

export function PortfolioOptimizer({
  initialPortfolio,
  constraints,
  onOptimize,
  userTier
}: PortfolioOptimizerProps) {
  // Component implementation with semantic naming
  // Financial disclaimers
  // Tier-based feature gating
  // Loading and error states
  // Accessibility attributes
}
```

This configuration ensures all generated code follows AARC Capital's specific requirements for financial tools, educational content, and freemium business model.
